// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

syntax = "proto3";

package rkcy;
option go_package = "github.com/lachlanorr/rocketcycle/pkg/rkcy";

import "google/protobuf/timestamp.proto";

// Convenience empty message for services that return or accept no data
message Void {}

message ApecsTxn {
    string id = 1; // uuid of txn used for tracing and reporting
    repeated AssocTxn assoc_txns = 2; // associated transactions

    TopicTarget response_target = 3;

    int32 current_step_idx = 4;
    Direction direction = 5; // starts in forward, can potentially go to reverse if the transaction is reversible
    UponError upon_error = 6; // how to handle errors

    repeated Step forward_steps = 7;  // filled upon creation with forward steps
    repeated Step reverse_steps = 8;  // upon an error in a "can_revert==true" transaction, this gets filled with the right rollback steps. Separatiing reverse from forward steps preserves the history for review of the nature of the failure.

    message Step {
        System system  = 1; // Whether to queue step into Process or Storage code
        string concern = 2; // logical persistence model that's used to partition messages
        string command = 3; // command name, this will map to a piece of code (e.g. function)
        string key     = 4; // instance key used as the partition key
        bytes payload  = 5; // opaque payload for command

        google.protobuf.Timestamp effective_time = 6; // time at which command should consider itself running

        CompoundOffset cmpd_offset  = 7; // when no nil, indicates the process topic offset associated with the step
        bytes instance = 8;
        Result result  = 9; // Result returned from step handler

        message Result {
            // Result code of step, generally one of "Code" enum below but users can define their own codes greater than RKCY_INTERNAL_MAX
            Code code = 1;

            // actual time this command result was recorded
            google.protobuf.Timestamp processed_time = 2;

            // general bucket for log events during a processed event
            repeated LogEvent logEvents = 4;

            string key = 5; // if present, this key should be used in next step
            bytes payload  = 6; // opaque payload returned from command, will be the input payload of next step
            bytes instance = 7; // opaque payload returned from command

            CompoundOffset cmpd_offset  = 8;
        }
    }
}

message AssocTxn {
    string id = 1;
    AssocType type = 2;

    enum AssocType {
        UNDEFINED = 0;
        PARENT = 1;
        GENERATED_STORAGE = 2;
        SECONDARY_STORAGE = 3;
    }
}

enum Direction {
    FORWARD = 0;
    REVERSE = 1;
}

enum System {
    NO_SYSTEM = 0;
    PROCESS = 1;
    STORAGE = 2;
    STORAGE_SCND = 3;
}

enum UponError {
    REPORT = 0;
    REVERT = 1;
    BAILOUT = 2;
}

message TopicTarget {
    string brokers = 1;
    string topic = 2;
    int32 partition = 3;
}

message LogEvent {
    Severity sev = 1;
    string msg = 2;
}

enum Severity {
    DBG = 0;
    INF = 1;
    WRN = 2;
    ERR = 3;
}

enum Code {
    UNDEFINED = 0;
    OK = 1;
    INTERNAL = 2;
    MARSHAL_FAILED = 3;
    NOT_FOUND = 4;
    CONNECTION = 5;
    CONSTRAINT_VIOLATION = 6;
    UNKNOWN_COMMAND = 7;
    INVALID_ARGUMENT = 8;
    NOT_IMPLEMENTED = 9;
    NIL_RESULT = 10;
    CANCELLED = 11;

    // User defined codes should be greater than RKCY_RESERVED_MAX
    RKCY_RESERVED_MAX = 32;
}

message CompoundOffset {
    int32 generation = 1;
    int32 partition  = 2;
    int64 offset     = 3;
}

message RelatedRequest {
    string concern = 1;
    string key = 2;
    string field = 3;
    bytes payload = 4;
}

message RelatedResponse {
    string concern = 1;
    string field = 2;
    bytes payload = 3;
}

message Config {
    map<string, string> string_vals = 1;
    map<string, bool> bool_vals = 2;
    map<string, double> float64_vals = 3;

    // key is protobuf message type
    map<string, Complex> complex_vals = 5;

    message Complex {
        // key is id of message
        // val is serialized protobuf
        map<string, bytes> message_vals = 1;
    }

    message Update {
        string key = 1;
        oneof val {
            string string_val = 2;
            bool bool_val = 3;
            double float64_val = 4;
            Complex complex_val = 6;
        }
    }
}

message ConcernAdminDirective {
    string concern = 1;
    System system  = 2;
    string txn_id  = 3;
}
