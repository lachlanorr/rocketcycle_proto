// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

syntax = "proto3";

package rkcy;
option go_package = "github.com/lachlanorr/rocketcycle/pkg/rkcy";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "rkcy/apecs.proto";
import "rkcy/platform.proto";

message DecodeInstanceArgs {
    string concern = 1;
    string payload64 = 2;
}

message DecodePayloadArgs {
    string concern = 1;
    System system = 2;
    string command = 3;
    string payload64 = 4;
}

message DecodeResponse {
    string json = 2;
}

message TrackedProducers {
    repeated ProducerInfo topic_producers = 1;

    message ProducerInfo {
        string topic = 1;
        string id = 2;
        string time_since_update = 3;
    }
}

message ConfigReadResponse {
    Config config = 1;
    string config_json = 2;
    google.protobuf.Timestamp last_changed = 3;
    int64 last_changed_offset = 4;
}

message ConfigReplaceRequest {
    string config_json = 1;
}

message ConfigUpdateRequest {
    string key = 1;
    oneof val {
        string string_val = 2;
        int64 bool_val = 3;
        double double_val = 4;
    }
}

message ConfigUpdateComplexRequest {
    string type = 1;
    string key = 2;
    string complex_json = 3;
}

service AdminService {
    rpc Platform(Void) returns (rkcy.Platform) {
        option (google.api.http) = {
            get: "/v1/platform/read"
        };
    }

    rpc ConfigRead(Void) returns (ConfigReadResponse) {
        option (google.api.http) = {
            get: "/v1/config/read"
        };
    }

    rpc ConfigUpdate(ConfigUpdateRequest) returns (Void) {
        option (google.api.http) = {
            post: "/v1/config/update"
        };
    }

    rpc ConfigUpdateComplex(ConfigUpdateComplexRequest) returns (Void) {
        option (google.api.http) = {
            post: "/v1/config/update/complex"
        };
    }

    rpc Producers(Void) returns (rkcy.TrackedProducers) {
        option (google.api.http) = {
            get: "/v1/producers/read"
        };
    }

    rpc DecodeInstance(DecodeInstanceArgs) returns (DecodeResponse) {
        option (google.api.http) = {
            post: "/v1/decode/instance"
            body: "*"
        };
    }

    rpc DecodeArgPayload(DecodePayloadArgs) returns (DecodeResponse) {
        option (google.api.http) = {
            post: "/v1/decode/arg"
            body: "*"
        };
    }

    rpc DecodeResultPayload(DecodePayloadArgs) returns (DecodeResponse) {
        option (google.api.http) = {
            post: "/v1/decode/result"
            body: "*"
        };
    }
}
